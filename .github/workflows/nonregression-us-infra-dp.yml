name: 'Non Regression Testing (US) - Infra'

on:
  workflow_dispatch:
#  schedule:
#    - cron: "0 11 * * 1-5"

env:
  FOLDER: infra-agent

jobs:
  log-context:
    name: Contexts
    runs-on: ubuntu-latest
    steps:
      # Dump all contexts
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

  get-test-definition-files:
    name: Test Definition Files
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-test-definition-files.outputs.result }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get Test Definition Files
        id: get-test-definition-files
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const fsp = fs.promises;
            const path = require('path');

            const { FOLDER } = process.env

            // readdir recursive directory search
            const { readdir } = fsp;
            async function getFiles(dir) {
                const dirents = await readdir(dir, { withFileTypes: true });
                const files = await Promise.all(dirents.map((dirent) => {
                    const res = path.join(dir, dirent.name);
                    return dirent.isDirectory() ? getFiles(res) : res;
                }));
                return Array.prototype.concat(...files);
            }
            const definitionsDir = 'test/definitions';
            const testDefinitions = await getFiles(definitionsDir + '/' + `${FOLDER}`);

            const outputTestFilesMap = testDefinitions.map(testDefinitionFile => {
                return { testDefinitionFile, 'testDisplayName': testDefinitionFile.replace(`${definitionsDir}/`, '') }
            })
            const output = {
                "include": outputTestFilesMap
            }
            console.log(output);
            return output;

  test-deploy-recipe:
    name: ${{ matrix.testDisplayName }}
    needs: [get-test-definition-files]
    if: ${{ fromJSON(needs.get-test-definition-files.outputs.matrix).include[0] }} # Avoids empty matrix validation error
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.get-test-definition-files.outputs.matrix) }}
      fail-fast: false
    env:
      MATRIX: ${{ toJSON(matrix) }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Update Test Definition Files URLs
        id: get-test-definition-files
        env:
          TEST_DEFINITION_FILE: ${{ matrix.testDefinitionFile }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const fsp = fs.promises;
            const path = require('path');

            // before returning, we need to edit the deploy config files in-place so they 
            // use the right URLs from the branch
            async function getDeployConfigFile(file, outputDir) {
              const data = await fsp.readFile(path.join(outputDir, file));
              return JSON.parse(data);
            }

            // Get testDefinitonFile from MATRIX env var
            const testDefinitionFile = process.env.TEST_DEFINITION_FILE;
            console.log(`Detected Deploy Config: ${JSON.stringify(testDefinitionFile, null, 2)}`)

            // Write file back to workspace
            const outputPath = `${process.env.GITHUB_WORKSPACE}/${testDefinitionFile}`;
            fs.writeFileSync(outputPath, jsonContent);

            return testDefinitionFile;

      - name: Install npm dependencies for deployer test runner
        working-directory: .github/workflows/scripts/deployer-platform
        run: npm install

      - name: Execute test
        id: runDeployerPlatformTest
        working-directory: .github/workflows/scripts/deployer-platform
        run: |
          node main.js
        env:
          TEST_DEFINITION_FILE: ${{ matrix.testDefinitionFile }}
          AWS_ACCESS_KEY_ID: ${{ secrets.DEPLOYER_PLATFORM_US_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOYER_PLATFORM_US_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.DEPLOYER_PLATFORM_US_AWS_REGION }}
          SQS_URL: ${{ secrets.DEPLOYER_PLATFORM_US_SQS_URL }}
          DYNAMO_TABLE: ${{ secrets.DEPLOYER_PLATFORM_US_DYNAMO_TABLE }}

      - name: Report any error
        if: steps.runDeployerPlatformTest.outputs.exit_status != 0
        run: exit 1

#  slack-notify:
#    name: Slack
#    runs-on: ubuntu-latest
#    needs: [test-deploy-recipe]
#    if: always()
#    steps:
#      - name: Build Result Notification
#        uses: 8398a7/action-slack@v3
#        with:
#          author_name: GitHub Actions
#          status: custom
#          fields: commit,repo,ref,author,eventName,message,workflow
#          custom_payload: |
#            {
#              username: "GitHub Actions",
#              icon_emoji: ":octocat:",
#              attachments: [{
#                color: ${{
#                  needs.test-deploy-recipe.result == 'success'
#                }} === true ? '#43cc11' : '#e05d44',
#                blocks: [
#                  {
#                    type: "section",
#                    text: {
#                      type: "mrkdwn",
#                      text: `Build for ${process.env.AS_REPO}`
#                    }
#                  },
#                  {
#                    type: "section",
#                    fields: [
#                      {
#                        type: "mrkdwn",
#                        text: `*Commit:*\n${process.env.AS_COMMIT}`
#                      },
#                      {
#                        type: "mrkdwn",
#                        text: `*Author:*\n${process.env.AS_AUTHOR}`
#                      },
#                      {
#                        type: "mrkdwn",
#                        text: `*Branch:*\n${process.env.AS_REF}`
#                      },
#                      {
#                        type: "mrkdwn",
#                        text: `*Message:*\n${process.env.AS_MESSAGE}`
#                      },
#                      {
#                        type: "mrkdwn",
#                        text: `*Type:*\n${process.env.AS_EVENT_NAME}`
#                      },
#                      {
#                        type: "mrkdwn",
#                        text: "*PR:*\n${{ github.event.pull_request.html_url }}"
#                      },
#                      {
#                        type: "mrkdwn",
#                        text: `*Workflow:*\n${ process.env.AS_WORKFLOW }`
#                      }
#                    ]
#                  },
#                  {
#                    type: "section",
#                    text: {
#                      type: "mrkdwn",
#                      text: [
#                        "*Result:*",
#                        `• ${ ${{ needs.test-deploy-recipe.result == 'success' }} === true ? '✅' : '❌' } Non-regression testing of all recipes (EU): ${{ needs.test-deploy-recipe.result }}`
#                      ].join('\n')
#                    }
#                  },
#                  {
#                    type: "context",
#                    elements: [
#                      {
#                        type: "image",
#                        image_url: "https://avatars2.githubusercontent.com/in/15368",
#                        alt_text: "Github Actions"
#                      },
#                      {
#                        type: "mrkdwn",
#                        text: "This message was created automatically by GitHub Actions."
#                      }
#                    ]
#                  }
#                ]
#              }]
#            }
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
