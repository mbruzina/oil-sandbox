# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: java-agent-installer
displayName: Java Agent Installer
description: New Relic install recipe for instrumenting Java applications
repository: https://github.com/newrelic/newrelic-java-agent

installTargets:
  - type: application
    os: linux
    kernelArch: x86_64
    platformFamily: "rhel"
  - type: application
    os: linux
    kernelArch: x86_64
    platformFamily: "debian"

dependencies:
  - infrastructure-agent-installer

keywords:
  - Apm
  - java

logMatch:
  - name: tomcat-versioned-catalina
    file: /opt/tomcat/*tomcat*/logs/*.log

processMatch:
  - java.*org.apache.catalina.startup.Bootstrap

preInstall:
  requireAtDiscovery: |
    user=$(whoami)
    if [[ "$user" != "root" ]]; then
      echo -e "This script must be run as root." >&2
      exit 132
    fi

    cutInstalled=$(which cut 2> /dev/null)
    if [[ -z "$cutInstalled" ]]; then
      echo -e "This installation recipe for the New Relic Java Agent on Linux requires 'cut' to be installed." >&2
      exit 132
    fi

    # Map of tool names to the associated error code
    required_tools_and_error_codes="grep:132 cat:132 tee:132"
    for tuple in $required_tools_and_error_codes; do
      tool=$(echo ${tuple} |cut -d':' -f1)
      code=$(echo ${tuple} |cut -d':' -f2)
      toolInstalled=$(which ${tool} | wc -l)
      if [[ "$toolInstalled" -eq 0 ]]; then
        echo -e "This installation recipe for the New Relic Java Agent on Linux requires '${tool}' to be installed." >&2
        exit ${code}
      fi
    done

    exit 0

validationNrql: "SELECT count(*) from JvmMetadataSummary WHERE sendingAccount = {{.NEW_RELIC_ACCOUNT_ID}} since 10 minutes ago"

successLinkConfig:
  type: EXPLORER
  filter: '"`tags.language` = ''java''"'

install:

  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: verify-continue
        - task: init
        - task: get-introspector
        - task: install-instrument-script
        - task: add-on-host-integration

    verify-continue:
      cmds:
        - |
          YELLOW='\033[0;33m'
          NOCOLOR='\033[0m'
          echo -e "${YELLOW}
          ===============================================================================================
          =                                                                                             =
          =                                           Warning                                           =
          =                                                                                             =
          =         This installation will periodically check for new Tomcat processes to monitor.      =
          =                                                                                             =
          =                                                                                             =
          ===============================================================================================
          ${NOCOLOR}"
          echo "
          If you prefer to instrument your Java application differently then check out our other installation options:
          https://docs.newrelic.com/docs/agents/java-agent/installation/install-java-agent/.
          "
          if [[ "{{.NEW_RELIC_ASSUME_YES}}" != "true" ]]; then
            while :; do
              echo -n "Do you want to install the Java Agent Y/N (default: Y)? "
              read answer
              echo ""
              if [[ -z "$answer" ]]; then
                exit 0
              fi
              firstChar=$(echo "${answer^^}" | cut -c1-1)
              if [[ "$firstChar" == "N" ]]; then
                echo "Exiting the installation"
                exit 130
              fi
              if [[ "$firstChar" == "Y" ]]; then
                exit 0
              fi
              echo -e "Please type Y or N only."
            done
          fi

    init:
      cmds:
        - |
          if [ ! -f /etc/newrelic-java ]; then
            mkdir -p /etc/newrelic-java
          fi

    get-introspector:
      cmds:
        - |
          echo "Retrieving Java Introspector..."
          isYumInstalled=$(which yum 2>&1 || true)
          if [[ -n "$isYumInstalled" ]]; then
            curl -s -O https://download.newrelic.com/install/java/introspector/latest/nri-introspector-java-0.1.0_SNAPSHOT-2.x86_64.rpm
            yum install -y -q nri-introspector-java-0.1.0_SNAPSHOT-2.x86_64.rpm 2> /dev/null || true
          else
            curl -s -O https://download.newrelic.com/install/java/introspector/latest/nri-introspector-java_0.1.0_SNAPSHOT-2_amd64.deb
            apt-get install -y -qq ./nri-introspector-java_0.1.0_SNAPSHOT-2_amd64.deb 2> /dev/null || true
          fi
          while :; do
            isJavaLsiRunning=$(sudo ps aux | grep nri-lsi-java | grep -v grep | wc -l)
            if [ "$isJavaLsiRunning" -eq 0 ]
            then
              break
            else
              sleep 1
            fi
          done

    install-instrument-script:
      cmds:
        - |
          if [ -f /etc/newrelic-java/dynamic-attach.sh ]; then
            rm -f /etc/newrelic-java/dynamic-attach.sh
          fi

          sudo touch /etc/newrelic-java/.pids
          sudo chmod -R 755 /etc/newrelic-java/.pids

          tee -a /etc/newrelic-java/dynamic-attach.sh > /dev/null <<"EOT"
          #!/bin/bash
          license={{.NEW_RELIC_LICENSE_KEY}}
          region={{.NEW_RELIC_REGION}}
          appName='{{.HOSTNAME}}-nr-app'
          pattern='org.apache.catalina.startup.Bootstrap'

          isJavaLsiRunning=$(sudo ps aux | grep nri-lsi-java | grep -v grep | wc -l)
          if [ "$isJavaLsiRunning" -eq 0 ]; then
            (exit 0)
          fi

          # just in case we have no saved pids
          if [ ! -f /etc/newrelic-java/.pids ]; then
            sudo touch /etc/newrelic-java/.pids
            sudo chmod -R 755 /etc/newrelic-java/.pids
          fi

          isDockerRunning=$(sudo ps aux | grep docker | grep -v grep | wc -l)
          if [ $isDockerRunning -gt 0 ]; then
            # just in case this is left over
            if [ -f /etc/newrelic-java/.pids_in_docker ]; then
              rm /etc/newrelic-java/.pids_in_docker
            fi
            touch /etc/newrelic-java/.pids_in_docker

            for CONTAINER in $(docker ps -q);
            do
              docker top $CONTAINER | awk '{print $2}' | sed '1d' >> /etc/newrelic-java/.pids_in_docker
            done
            sort -o /etc/newrelic-java/.pids_in_docker /etc/newrelic-java/.pids_in_docker
          fi

          if [[ "{{.NEW_RELIC_ASSUME_YES}}" != "true" ]]; then
            echo -n "Enter an app name prefix (default: {{.HOSTNAME}}-app): "
            read -r answer
            if [[ -n $answer ]]; then
              appName=$answer
            fi
          fi

          sudo touch /etc/newrelic-java/.detected_pids
          sudo chmod 755 /etc/newrelic-java/.detected_pids
          sudo nri-lsi-java -list | tr "," "\n" | tr -d "[ " | tr -d " ]" >> /etc/newrelic-java/.detected_pids
          sudo sort -o /etc/newrelic-java/.detected_pids /etc/newrelic-java/.detected_pids

          # if differences in state are detected, swap pid file with detected and attempt to attach
          new_ids=$(sudo comm -3 /etc/newrelic-java/.detected_pids /etc/newrelic-java/.pids | wc -l)
          if [[ $new_ids -gt 0 ]]; then
            sudo rm /etc/newrelic-java/.pids
            sudo mv /etc/newrelic-java/.detected_pids /etc/newrelic-java/.pids
            for JAVA_PID in $(sudo cat /etc/newrelic-java/.pids);
            do
              INTROSPECTION_DATA=$(sudo nri-lsi-java -introspect ${JAVA_PID})
              isMatchingPattern=$(echo $INTROSPECTION_DATA | grep $pattern | grep -v grep | wc -l)
              if [ "$isMatchingPattern" -gt 0 ]; then
                if [ -f /etc/newrelic-java/.pids_in_docker ]; then
                  # check if docker_pid exists, then check if pid is on a container
                  if [[ "$JAVA_PID" == "$(cat /etc/newrelic-java/.pids_in_docker | grep $JAVA_PID | grep -v grep)" ]]; then
                    CONTAINER_ID=$(sudo docker ps -q | xargs sudo docker inspect --format '{{"{{"}}.State.Pid{{"}}"}}, {{"{{"}}.ID{{"}}"}}' | sed  -n -e "s|$JAVA_PID, ||p")
                    if [[ $CONTAINER_ID ]]; then
                      appName=$(sudo docker inspect --format '{{"{{"}}.Name{{"}}"}}' $CONTAINER_ID | tr -d '/')
                      echo "Running Tomcat process detected in container '$appName' ($CONTAINER_ID)"
                      OS_DETAILS=$(sudo docker exec $CONTAINER_ID sh -c "uname -a")
                      if [[ $OS_DETAILS ]]; then
                        if [[ $(echo $OS_DETAILS | grep -i 'ubuntu' | grep -v grep | wc -l) -gt 0 || $(echo $OS_DETAILS | grep -i 'debian' | grep -v grep | wc -l) -gt 0 ]]; then
                          sudo docker exec $CONTAINER_ID sh -c "curl -s -O https://download.newrelic.com/install/java/introspector/latest/nri-introspector-java_0.1.0_SNAPSHOT-2_amd64.deb"
                          sudo docker exec $CONTAINER_ID sh -c "apt-get install -y -qq ./nri-introspector-java_0.1.0_SNAPSHOT-2_amd64.deb 2> /dev/null || true"
                        else
                          sudo docker exec $CONTAINER_ID sh -c "curl -s -O https://download.newrelic.com/install/java/introspector/latest/nri-introspector-java-0.1.0_SNAPSHOT-2.x86_64.rpm"
                          sudo docker exec $CONTAINER_ID sh -c "yum install -y -q nri-introspector-java-0.1.0_SNAPSHOT-2.x86_64.rpm 2> /dev/null || true"
                        fi
                        echo -n "Attaching agent to Tomcat process in '$appName'..."
                        sudo docker exec $CONTAINER_ID sh -c "nri-lsi-java -apm 1 -appName $appName -license $license -region $region > /dev/null || true"
                        echo "complete!"
                      else
                        echo -e "Skipping instrumentation of process id $JAVA_PID: no OS Details for '$appName'"
                      fi
                    else
                      echo -e "Skipping instrumentation of process id $JAVA_PID: could not determine owning container"
                    fi
                  fi
                else
                  echo -n "Attaching agent to Tomcat process with PID $JAVA_PID...:

                  output=$(sudo nri-lsi-java -apm $JAVA_PID -appName $appName -license $license -region $region)
                  echo "complete!:
                fi
              fi
            done
          else
            # otherwise remove our detecteds as they are the same state
            sudo rm /etc/newrelic-java/.detected_pids
          fi

          # cleanup
          if [ -f /etc/newrelic-java/.pids_in_docker ]; then
            rm /etc/newrelic-java/.pids_in_docker
          fi

          (exit 0)
          EOT
          sudo chmod 755 /etc/newrelic-java/dynamic-attach.sh

    add-on-host-integration:
      cmds:
        - |
          if [ -f /etc/newrelic-infra/integrations.d/java-dynamic-attach-config.yml ]; then
            rm -f /etc/newrelic-infra/integrations.d/java-dynamic-attach-config.yml
          fi
          tee -a /etc/newrelic-infra/integrations.d/java-dynamic-attach-config.yml > /dev/null <<"EOT"
          integrations:
            - name: dynamic-attach
              exec: ./dynamic-attach.sh
              working_dir: /etc/newrelic-java
              interval: 60s
              integration_user: root

          EOT
          sudo chmod 755 /etc/newrelic-infra/integrations.d/java-dynamic-attach-config.yml