# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: java-agent-installer
displayName: Java Agent Installer
description: New Relic install recipe for instrumenting Java applications
repository: https://github.com/newrelic/newrelic-java-agent

installTargets:
  - type: application
    os: linux
    kernelArch: x86_64
    platformFamily: "rhel"
  - type: application
    os: linux
    kernelArch: x86_64
    platformFamily: "debian"


keywords:
  - Apm
  - java

logMatch:
  - name: tomcat-versioned-catalina
    file: /opt/tomcat/*tomcat*/logs/catalina.out
  - name: tomcat-catalina-opt
    file: /opt/*tomcat*/logs/catalina.out
  - name: tomcat-catalina-var
    file: /var/log/*tomcat*/catalina.out

processMatch:
  - java.*org\.apache\.catalina\.startup\.Bootstrap
  - java.*wildfly.*jboss\-modules\.jar
  - java.*jetty.*start\.jar

preInstall:
  requireAtDiscovery: |
    # must be root user
    USER=$(whoami)
    if [[ "$USER" != "root" ]]; then
      echo -e "This script must be run as root." >&2
      exit 132
    fi
    exit 0


validationNrql: "SELECT count(*) FROM ApplicationAgentContext WHERE host LIKE '{{.HOSTNAME}}%' SINCE 10 minutes AGO"

successLinkConfig:
  type: EXPLORER
  filter: '"`tags.language` = ''java''"'

install:

  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: init
        - task: get-introspector
        - task: verify-pre-requisites
        - task: install-instrument-script
        - task: execute-instrument-script

    init:
      cmds:
        - |
          if [ ! -f /etc/newrelic-java ]; then
            mkdir -p /etc/newrelic-java
          fi

    get-introspector:
      cmds:
        - |
          echo "Retrieving Java Introspector..."
          while :; do
            isJavaLsiRunning=$(sudo ps aux | grep nri-lsi-java | grep -v grep | wc -l)
            if [ "$isJavaLsiRunning" -eq 0 ]
            then
              echo "Java LSI is not running"
              break
            else
              echo "Waiting on Java LSI to finish running..."
              sleep 1
            fi
          done
          isYumInstalled=$(which yum 2>&1 || true)
          if [[ -n "$isYumInstalled" ]]; then
            yum remove -y -q nri-introspector-java.x86_64 2> /dev/null
            curl -s -O https://download.newrelic.com/install/java/introspector/latest/nri-introspector-java-0.1.0_SNAPSHOT-2.x86_64.rpm
            yum install -y -q nri-introspector-java-0.1.0_SNAPSHOT-2.x86_64.rpm 2> /dev/null || true
          else
            apt-get remove -y -qq nri-introspector-java.x86_64 2> /dev/null
            curl -s -O https://download.newrelic.com/install/java/introspector/latest/nri-introspector-java_0.1.0_SNAPSHOT-2_amd64.deb
            apt-get install -y -qq ./nri-introspector-java_0.1.0_SNAPSHOT-2_amd64.deb 2> /dev/null || true
          fi

    verify-pre-requisites:
      cmds:
        - |
          red='\033[0;31m'
          noColor='\033[0m'

          cutInstalled=$(which cut 2> /dev/null)
          if [[ -z "$cutInstalled" ]]; then
            echo -e "${red}This installation recipe for the New Relic Java Agent on Linux requires 'cut' to be installed.${noColor}" >&2
            exit 22
          fi

          # Map of tool names to the associated error code
          required_tools_and_error_codes="grep:10 sed:11 awk:12 cat:13 tee:14 touch:15 mktemp:22 readlink:22 realpath:22 tr:23 td:24"
          for tuple in $required_tools_and_error_codes; do
            tool=$(echo ${tuple} |cut -d':' -f1)
            code=$(echo ${tuple} |cut -d':' -f2)
            toolInstalled=$(which ${tool} | wc -l)
            if [[ "$toolInstalled" -eq 0 ]]; then
              echo -e "${red}This installation recipe for the New Relic Java Agent on Linux requires '${tool}' to be installed.${noColor}" >&2
              exit ${code}
            fi
          done

    install-instrument-script:
      cmds:
        - |
          if [ -f /etc/newrelic-java/auto-instrument.sh ]; then
            rm -f /etc/newrelic-java/auto-instrument.sh
          fi
          tee -a /etc/newrelic-java/auto-instrument.sh > /dev/null <<"EOT"
          license=$1
          region=$2
          appName=$3
          pattern=$4
          ALL_JAVA_PIDS=$(sudo nri-lsi-java -list | tr -d '[]')
          for JAVA_PID in "${ALL_JAVA_PIDS[@]}"
          do
            INTROSPECTION_DATA=$(sudo nri-lsi-java -introspect ${JAVA_PID})
            isMatchingPattern=$(echo $INTROSPECTION_DATA | grep $pattern | grep -v grep | wc -l)
            if [ "$isMatchingPattern" -gt 0 ]
            then
              echo "Found match with pattern:$pattern on pid:$JAVA_PID for INTROSPECTION_DATA:$INTROSPECTION_DATA:"
              output=$(sudo nri-lsi-java -apm $JAVA_PID -appName $appName -license $license -region $region)
              echo "attach output:$output"
            fi
          done
          EOT
<<<<<<< HEAD
<<<<<<< HEAD
=======
          sudo chmod 700 /etc/newrelic-infra/auto-instrument.sh
=======
          sudo chmod 700 /etc/newrelic-java/auto-instrument.sh
>>>>>>> 19e08681 (fix path)

    execute-instrument-script:
      cmds:
        - |
<<<<<<< HEAD
          /etc/newrelic-infra/auto-instrument.sh {{.NEW_RELIC_LICENSE_KEY}} {{.NEW_RELIC_REGION}} {{.HOSTNAME}} 'catalina'
>>>>>>> ba88fb51 (implement pattern match)
=======
          /etc/newrelic-java/auto-instrument.sh {{.NEW_RELIC_LICENSE_KEY}} {{.NEW_RELIC_REGION}} {{.HOSTNAME}} 'catalina'
>>>>>>> 19e08681 (fix path)
